{"ast":null,"code":"var _jsxFileName = \"/Users/lucasmanfioletti/Downloads/dapp2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport TuringArtifact from './artifacts/contracts/Turing.sol/Turing.json';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nconst MESSAGES = {\n  METAMASK_NOT_FOUND: 'MetaMask não encontrado',\n  INITIALIZATION_ERROR: 'Erro ao conectar à MetaMask. Verifique o console.',\n  CODINOMES_LOAD_ERROR: 'Erro ao carregar codinomes. Verifique o console.',\n  TOKEN_ISSUED_SUCCESS: 'Tokens emitidos com sucesso!',\n  VOTE_SUCCESS: 'Voto realizado com sucesso!',\n  RANKING_UPDATE_ERROR: 'Erro ao atualizar ranking. Verifique o console.',\n  FIELDS_REQUIRED: 'Preencha todos os campos',\n  VOTING_TOGGLE_SUCCESS: status => `Votação ${status} com sucesso!`\n};\n\nfunction App() {\n  _s();\n\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [codinomes, setCodinomes] = useState([]);\n  const [selected, setSelected] = useState({\n    issue: '',\n    vote: ''\n  });\n  const [amount, setAmount] = useState({\n    issue: '',\n    vote: ''\n  });\n  const [ranking, setRanking] = useState([]);\n  const [isVotingActive, setIsVotingActive] = useState(true);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  const initialize = async () => {\n    try {\n      const provider = await detectEthereumProvider();\n      if (!provider) return alert(MESSAGES.METAMASK_NOT_FOUND);\n      await provider.request({\n        method: 'eth_requestAccounts'\n      });\n      const web3Provider = new ethers.providers.Web3Provider(provider);\n      setProvider(web3Provider);\n      const signer = web3Provider.getSigner();\n      const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, TuringArtifact.abi, signer);\n      setContract(contractInstance);\n      const userAccount = await signer.getAddress();\n      setAccount(userAccount);\n      await loadCodinomes(contractInstance);\n      await updateRanking(contractInstance);\n    } catch (error) {\n      console.error('Erro ao inicializar:', error);\n      alert(MESSAGES.INITIALIZATION_ERROR);\n    }\n  };\n\n  const loadCodinomes = async contract => {\n    try {\n      const names = await contract.getCodinomes();\n      setCodinomes(names);\n    } catch (error) {\n      console.error('Erro ao carregar codinomes:', error);\n      alert(MESSAGES.CODINOMES_LOAD_ERROR);\n    }\n  };\n\n  const updateRanking = async contract => {\n    try {\n      const names = await contract.getCodinomes();\n      const rankingData = await Promise.all(names.map(async name => {\n        const address = await contract.codinomes(name);\n        const balance = await contract.balanceOf(address);\n        return {\n          name,\n          balance: ethers.utils.formatEther(balance)\n        };\n      }));\n      setRanking(rankingData.sort((a, b) => b.balance - a.balance));\n    } catch (error) {\n      console.error('Erro ao atualizar ranking:', error);\n      alert(MESSAGES.RANKING_UPDATE_ERROR);\n    }\n\n    setSelected({\n      issue: '',\n      token: ''\n    });\n    setAmount({\n      issue: '',\n      token: ''\n    });\n  };\n\n  const handleIssueTokens = async () => {\n    if (!selected.issue || !amount.issue) return alert(MESSAGES.FIELDS_REQUIRED);\n    setLoading(true);\n\n    try {\n      const parsedAmount = ethers.utils.parseEther(amount.issue);\n      const tx = await contract.issueToken(selected.issue, parsedAmount);\n      await tx.wait();\n      alert(MESSAGES.TOKEN_ISSUED_SUCCESS);\n      await updateRanking(contract);\n    } catch (error) {\n      console.error('Erro ao emitir tokens:', error);\n      alert('Erro ao emitir tokens. Verifique o console.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleVote = async () => {\n    if (!selected.vote || !amount.vote) return alert(MESSAGES.FIELDS_REQUIRED);\n    setLoading(true);\n\n    try {\n      const parsedAmount = ethers.utils.parseEther(amount.vote);\n      const tx = await contract.vote(selected.vote, parsedAmount);\n      await tx.wait();\n      alert(MESSAGES.VOTE_SUCCESS);\n      await updateRanking(contract);\n    } catch (error) {\n      console.error('Erro ao votar:', error);\n      alert('Erro ao votar. Verifique o console.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleVoting = async method => {\n    setLoading(true);\n\n    try {\n      const tx = await contract[method]();\n      await tx.wait();\n      setIsVotingActive(method === 'votingOn');\n      alert(MESSAGES.VOTING_TOGGLE_SUCCESS(method === 'votingOn' ? 'ativada' : 'desativada'));\n    } catch (error) {\n      console.error(`Erro ao ${method === 'votingOn' ? 'ativar' : 'desativar'} votação:`, error);\n      alert('Erro ao alterar o estado da votação. Verifique o console.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Turing DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"token-issue-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Emitir Tokens\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Selection, {\n          codinomes: codinomes,\n          selected: selected.issue,\n          setSelected: value => setSelected({ ...selected,\n            issue: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          value: amount.issue,\n          setValue: value => setAmount({ ...amount,\n            issue: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleIssueTokens,\n          disabled: loading,\n          children: loading ? 'Processando...' : 'Emitir'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"vote-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Votar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Selection, {\n          codinomes: codinomes,\n          selected: selected.vote,\n          setSelected: value => setSelected({ ...selected,\n            vote: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          value: amount.vote,\n          setValue: value => setAmount({ ...amount,\n            vote: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleVote,\n          disabled: !isVotingActive || loading,\n          children: loading ? 'Processando...' : 'Votar'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status da Vota\\xE7\\xE3o: \", isVotingActive ? 'Ativa' : 'Inativa']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"voting-control-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Controle de Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleVoting('votingOn'),\n        disabled: loading || isVotingActive,\n        children: loading ? 'Processando...' : 'Ativar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleVoting('votingOff'),\n        disabled: loading || !isVotingActive,\n        children: loading ? 'Processando...' : 'Desativar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Ranking, {\n      ranking: ranking\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"khzABvPJz5aG7n9ju9//ypV8NsM=\");\n\n_c = App;\n\nconst Selection = _ref => {\n  let {\n    codinomes,\n    selected,\n    setSelected\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: selected,\n    onChange: e => setSelected(e.target.value),\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"Selecione\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }, this), codinomes.map((name, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: name,\n      children: name\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Selection;\n\nconst InputField = _ref2 => {\n  let {\n    value,\n    setValue\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"number\",\n    placeholder: \"Quantidade\",\n    value: value,\n    onChange: e => setValue(e.target.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 3\n  }, this);\n};\n\n_c3 = InputField;\n\nconst Ranking = _ref3 => {\n  let {\n    ranking\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"ranking-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ranking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"ranking-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Saldo (TUR)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: ranking.map((entry, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: entry.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: entry.balance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 3\n  }, this);\n};\n\n_c4 = Ranking;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Selection\");\n$RefreshReg$(_c3, \"InputField\");\n$RefreshReg$(_c4, \"Ranking\");","map":{"version":3,"sources":["/Users/lucasmanfioletti/Downloads/dapp2/src/App.js"],"names":["React","useState","useEffect","ethers","detectEthereumProvider","TuringArtifact","CONTRACT_ADDRESS","MESSAGES","METAMASK_NOT_FOUND","INITIALIZATION_ERROR","CODINOMES_LOAD_ERROR","TOKEN_ISSUED_SUCCESS","VOTE_SUCCESS","RANKING_UPDATE_ERROR","FIELDS_REQUIRED","VOTING_TOGGLE_SUCCESS","status","App","provider","setProvider","contract","setContract","account","setAccount","codinomes","setCodinomes","selected","setSelected","issue","vote","amount","setAmount","ranking","setRanking","isVotingActive","setIsVotingActive","loading","setLoading","initialize","alert","request","method","web3Provider","providers","Web3Provider","signer","getSigner","contractInstance","Contract","abi","userAccount","getAddress","loadCodinomes","updateRanking","error","console","names","getCodinomes","rankingData","Promise","all","map","name","address","balance","balanceOf","utils","formatEther","sort","a","b","token","handleIssueTokens","parsedAmount","parseEther","tx","issueToken","wait","handleVote","toggleVoting","value","Selection","e","target","i","InputField","setValue","Ranking","entry"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport TuringArtifact from './artifacts/contracts/Turing.sol/Turing.json';\nimport './App.css';\n\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nconst MESSAGES = {\n  METAMASK_NOT_FOUND: 'MetaMask não encontrado',\n  INITIALIZATION_ERROR: 'Erro ao conectar à MetaMask. Verifique o console.',\n  CODINOMES_LOAD_ERROR: 'Erro ao carregar codinomes. Verifique o console.',\n  TOKEN_ISSUED_SUCCESS: 'Tokens emitidos com sucesso!',\n  VOTE_SUCCESS: 'Voto realizado com sucesso!',\n  RANKING_UPDATE_ERROR: 'Erro ao atualizar ranking. Verifique o console.',\n  FIELDS_REQUIRED: 'Preencha todos os campos',\n  VOTING_TOGGLE_SUCCESS: (status) => `Votação ${status} com sucesso!`,\n};\n\nfunction App() {\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [codinomes, setCodinomes] = useState([]);\n  const [selected, setSelected] = useState({ issue: '', vote: '' });\n  const [amount, setAmount] = useState({ issue: '', vote: '' });\n  const [ranking, setRanking] = useState([]);\n  const [isVotingActive, setIsVotingActive] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  const initialize = async () => {\n    try {\n      const provider = await detectEthereumProvider();\n      if (!provider) return alert(MESSAGES.METAMASK_NOT_FOUND);\n\n      await provider.request({ method: 'eth_requestAccounts' });\n      const web3Provider = new ethers.providers.Web3Provider(provider);\n      setProvider(web3Provider);\n\n      const signer = web3Provider.getSigner();\n      const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, TuringArtifact.abi, signer);\n      setContract(contractInstance);\n\n      const userAccount = await signer.getAddress();\n      setAccount(userAccount);\n\n      await loadCodinomes(contractInstance);\n      await updateRanking(contractInstance);\n    } catch (error) {\n      console.error('Erro ao inicializar:', error);\n      alert(MESSAGES.INITIALIZATION_ERROR);\n    }\n  };\n\n  const loadCodinomes = async (contract) => {\n    try {\n      const names = await contract.getCodinomes();\n      setCodinomes(names);\n    } catch (error) {\n      console.error('Erro ao carregar codinomes:', error);\n      alert(MESSAGES.CODINOMES_LOAD_ERROR);\n    }\n  };\n\n  const updateRanking = async (contract) => {\n    try {\n      const names = await contract.getCodinomes();\n      const rankingData = await Promise.all(names.map(async (name) => {\n        const address = await contract.codinomes(name);\n        const balance = await contract.balanceOf(address);\n        return { name, balance: ethers.utils.formatEther(balance) };\n      }));\n      setRanking(rankingData.sort((a, b) => b.balance - a.balance));\n    } catch (error) {\n      console.error('Erro ao atualizar ranking:', error);\n      alert(MESSAGES.RANKING_UPDATE_ERROR);\n    }\n    setSelected({issue: '', token: ''});\n    setAmount({issue: '', token: ''});\n  };\n\n  const handleIssueTokens = async () => {\n    if (!selected.issue || !amount.issue) return alert(MESSAGES.FIELDS_REQUIRED);\n    setLoading(true);\n    try {\n      const parsedAmount = ethers.utils.parseEther(amount.issue);\n      const tx = await contract.issueToken(selected.issue, parsedAmount);\n      await tx.wait();\n      alert(MESSAGES.TOKEN_ISSUED_SUCCESS);\n      await updateRanking(contract);\n    } catch (error) {\n      console.error('Erro ao emitir tokens:', error);\n      alert('Erro ao emitir tokens. Verifique o console.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleVote = async () => {\n    if (!selected.vote || !amount.vote) return alert(MESSAGES.FIELDS_REQUIRED);\n    setLoading(true);\n    try {\n      const parsedAmount = ethers.utils.parseEther(amount.vote);\n      const tx = await contract.vote(selected.vote, parsedAmount);\n      await tx.wait();\n      alert(MESSAGES.VOTE_SUCCESS);\n      await updateRanking(contract);\n    } catch (error) {\n      console.error('Erro ao votar:', error);\n      alert('Erro ao votar. Verifique o console.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleVoting = async (method) => {\n    setLoading(true);\n    try {\n      const tx = await contract[method]();\n      await tx.wait();\n      setIsVotingActive(method === 'votingOn');\n      alert(MESSAGES.VOTING_TOGGLE_SUCCESS(method === 'votingOn' ? 'ativada' : 'desativada'));\n    } catch (error) {\n      console.error(`Erro ao ${method === 'votingOn' ? 'ativar' : 'desativar'} votação:`, error);\n      alert('Erro ao alterar o estado da votação. Verifique o console.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Turing DApp</h1>\n      <div className=\"flex-container\">\n        <section className=\"token-issue-section\">\n          <h2>Emitir Tokens</h2>\n          <Selection codinomes={codinomes} selected={selected.issue} setSelected={(value) => setSelected({ ...selected, issue: value })} />\n          <InputField value={amount.issue} setValue={(value) => setAmount({ ...amount, issue: value })} />\n          <button onClick={handleIssueTokens} disabled={loading}>\n            {loading ? 'Processando...' : 'Emitir'}\n          </button>\n        </section>\n        <section className=\"vote-section\">\n          <h2>Votar</h2>\n          <Selection codinomes={codinomes} selected={selected.vote} setSelected={(value) => setSelected({ ...selected, vote: value })} />\n          <InputField value={amount.vote} setValue={(value) => setAmount({ ...amount, vote: value })} />\n          <button onClick={handleVote} disabled={!isVotingActive || loading}>\n            {loading ? 'Processando...' : 'Votar'}\n          </button>\n          <p>Status da Votação: {isVotingActive ? 'Ativa' : 'Inativa'}</p>\n        </section>\n      </div>\n      <section className=\"voting-control-section\">\n        <h2>Controle de Votação</h2>\n        <button onClick={() => toggleVoting('votingOn')} disabled={loading || isVotingActive}>\n          {loading ? 'Processando...' : 'Ativar'}\n        </button>\n        <button onClick={() => toggleVoting('votingOff')} disabled={loading || !isVotingActive}>\n          {loading ? 'Processando...' : 'Desativar'}\n        </button>\n      </section>\n      <Ranking ranking={ranking} />\n    </div>\n  );\n}\n\nconst Selection = ({ codinomes, selected, setSelected }) => (\n  <select value={selected} onChange={(e) => setSelected(e.target.value)}>\n    <option value=\"\">Selecione</option>\n    {codinomes.map((name, i) => (\n      <option key={i} value={name}>{name}</option>\n    ))}\n  </select>\n);\n\nconst InputField = ({ value, setValue }) => (\n  <input type=\"number\" placeholder=\"Quantidade\" value={value} onChange={(e) => setValue(e.target.value)} />\n);\n\nconst Ranking = ({ ranking }) => (\n  <section className=\"ranking-section\">\n    <h2>Ranking</h2>\n    <table className=\"ranking-table\">\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Saldo (TUR)</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ranking.map((entry, i) => (\n          <tr key={i}>\n            <td>{entry.name}</td>\n            <td>{entry.balance}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </section>\n);\n\nexport default App;"]},"metadata":{},"sourceType":"module"}