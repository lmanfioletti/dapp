{"ast":null,"code":"\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\n\nfunction detectEthereumProvider() {\n  let {\n    mustBeMetaMask = false,\n    silent = false,\n    timeout = 3000\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _validateInputs();\n\n  let handled = false;\n  return new Promise(resolve => {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        const message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n\nmodule.exports = detectEthereumProvider;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAgBA;;;;;;;;;;;;;;;AAeG;;AACH,SAAS,sBAAT,GAIM;AAAA,MAJwD;AAC5D,IAAA,cAAc,GAAG,KAD2C;AAE5D,IAAA,MAAM,GAAG,KAFmD;AAG5D,IAAA,OAAO,GAAG;AAHkD,GAIxD,uEAAF,EAAE;;AAEJ,EAAA,eAAe;;AAEf,MAAI,OAAO,GAAG,KAAd;AAEA,SAAO,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC7B,QAAK,MAAiB,CAAC,QAAvB,EAAiC;AAE/B,MAAA,cAAc;AAEf,KAJD,MAIO;AAEL,MAAA,MAAM,CAAC,gBAAP,CACE,sBADF,EAEE,cAFF,EAGE;AAAE,QAAA,IAAI,EAAE;AAAR,OAHF;AAMA,MAAA,UAAU,CAAC,MAAK;AACd,QAAA,cAAc;AACf,OAFS,EAEP,OAFO,CAAV;AAGD;;AAED,aAAS,cAAT,GAAuB;AAErB,UAAI,OAAJ,EAAa;AACX;AACD;;AACD,MAAA,OAAO,GAAG,IAAV;AAEA,MAAA,MAAM,CAAC,mBAAP,CAA2B,sBAA3B,EAAmD,cAAnD;AAEA,YAAM;AAAE,QAAA;AAAF,UAAe,MAArB;;AAEA,UAAI,QAAQ,KAAK,CAAC,cAAD,IAAmB,QAAQ,CAAC,UAAjC,CAAZ,EAA0D;AACxD,QAAA,OAAO,CAAC,QAAD,CAAP;AACD,OAFD,MAEO;AAEL,cAAM,OAAO,GAAG,cAAc,IAAI,QAAlB,GACZ,wCADY,GAEZ,mCAFJ;AAIA,SAAC,MAAD,IAAW,OAAO,CAAC,KAAR,CAAc,4BAAd,EAA4C,OAA5C,CAAX;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF;AACF,GAzCM,CAAP;;AA2CA,WAAS,eAAT,GAAwB;AACtB,QAAI,OAAO,cAAP,KAA0B,SAA9B,EAAyC;AACvC,YAAM,IAAI,KAAJ,CAAU,8EAAV,CAAN;AACD;;AACD,QAAI,OAAO,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CAAU,sEAAV,CAAN;AACD;;AACD,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CAAU,sEAAV,CAAN;AACD;AACF;AACF;;AAlFD,MAAA,CAAA,OAAA,GAAS,sBAAT","sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}